1.JsonCpp
1.1.JsonCpp简介
1.2.JsonCpp环境搭建
1.2.1.下载地址
https://github.com/open-source-parsers/jsoncpp#generating-amalgamated-source-and-header
1.2.2.Qt中JsonCpp安装
①　解压jsoncpp-master.zip包 
②　在根目录下，运行python amalgamate.py 
③　在根目录中生成dist文件夹包含三个文件dist/json/json-forwards.h dist/json/json.h dist/json.cpp 
④　在Qt工程目录下，生成json文件夹，将json-forwards.h和json.h放到json文件夹，json.cpp文件放到工程同级文件夹。 
⑤　工程中添加jsoncpp.cpp文件，并将json.cpp中的"#include<json/config.h>注释掉。

//本人使用方法
void CGenerateSample::ParseJson()
{
	ifstream ifs(strJsonName);
	if (!ifs)
	{
		return;
	}

	CharReaderBuilder builder;
	builder["collectComments"] = false;
	//CharReader* reader(builder.newCharReader());
	Value root;
	JSONCPP_STRING errs;
	if (Json::parseFromStream(builder,ifs,&root,&errs))
	{
		Value & valInputs = root["Inputs"];
		if (valInputs.size() != 3)
		{
			return;
		}


		strInShp=valInputs[0]["Path"].asString();
		strInImg = valInputs[1]["Path"].asString();
		strInImageXML = valInputs[2]["Path"].asString();

		Value valOutputs = root["Outputs"];
		if (valOutputs.size() != 2)
		{
			return;
		}
		strResultOutPath = valOutputs[1]["Path"].asString();
	}
	else
	{
		cout << errs.c_str() << endl;
	}
	ifs.close();
}



//老接口
1.3.读写JsonCpp
1.3.1.写
#include <iostream>
#include <fstream>
#include "json/json.h"
using namespace Json;
using namespace std;

{
    "animals":{
    "dog":[
        {
            "name":"Rufus",
            "age":15
        },
        {
            "name":"Marty",
            "age":null
        }
        ]
    }
}


void writeJson()
{
    Value  rootAnimalsObj;
    Value dog;
    Value  dogArray;

    Value  dogValueItem1;
    dogValueItem1["name"] = "Rufus";
    dogValueItem1["age"]  = 15;

    Value  dogValueItem2;
    dogValueItem2["name"] = "Marty";
    dogValueItem2["age"]  = "";

    dogArray.append(dogValueItem1);
    dogArray.append(dogValueItem2);
    dog["dog"] = dogArray;
    rootAnimalsObj["animals"] = dog;

    string str = rootAnimalsObj.toStyledString();
    cout<<str;

    ofstream ofs;
    ofs.open("test_write.json");
    ofs << str;
    ofs.close();

    return;
}

int main()
{
    writeJson();
    return 0;

1.3.2.读
#include <iostream>
#include <fstream>
#include "json/json.h"
using namespace Json;
using namespace std;

{
    "animals":{
    "dog":[
        {
            "name":"Rufus",
            "age":15
        },
        {
            "name":"Marty",
            "age":null
        }
        ]
    }
}

void readJson()
{
    ifstream is("aa.json");
    if(!is)
    {
        cout<<"open error"<<endl;
        return;
    }
    Reader reader;
    Value root;

    if(reader.parse(is,root))
    {
        cout<<root<<endl;
        Value & dogArr = root["animals"]["dog"];
        for(int i=0; i<dogArr.size(); i++)
        {
            cout<<dogArr[i]["name"].asString()<<endl;
            cout<<dogArr[i]["age"].asInt()<<endl;
        }

    }

    is.close();
}

int main()
{
    readJson();
    return 0;
}
